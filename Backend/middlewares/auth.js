import { User } from "../models/userschema.js";
import { asyncerror } from "./catchAsyncError.js";
import ErrorHandler from "./errorMiddleware.js";
import jwt from "jsonwebtoken";
export const isAdminAuthenticated = asyncerror(async (req, res, next) => {
  const token = req.cookies.AdminToken;
  if (!token) {
    return next(new ErrorHandler("Admin not Authenticated", 400));
  }
  //verify that jwt token is generated by us or third party
  const decoded = jwt.verify(token, process.env.JWT_SECRET_KEY);
  req.user = await User.findById(decoded.id);
  if (req.user.role !== "Admin") {
    return next(new ErrorHandler(`${req.user.role} is not autherized`, 403));
  }

  next();
});
export const isPatientAuthenticated = asyncerror(async (req, res, next) => {
    const token = req.cookies.PatientToken;
    if (!token) {
      return next(new ErrorHandler("Patient not Authenticated", 400));
    }
    //verify that jwt token is generated by us or third party
    const decoded = jwt.verify(token, process.env.JWT_SECRET_KEY);
    req.user = await User.findById(decoded.id);
    if (req.user.role !== "Patient") {
      return next(new ErrorHandler(`${req.user.role} is not autherized`, 403));
    }
  
    next();
  });
  
